taskKey="com.codegym.task.task30.task3008.big22"\n\nChat (part 22)


So let&#39;s recap:
&bull;	You wrote a text messaging server.
&bull;	You wrote a console-based client that can connect to the server and exchange messages with other chat participants.
&bull;	You wrote a bot client that can receive requests and send information about the current date and time.
&bull;	You wrote a chat client with a graphical interface.

Here are some things you might add or improve:
&bull;	You could add support for private messages (when a message is sent to a specific participant instead of everyone).
&bull;	You could extend the bot&#39;s capabilities. Try to teach it to respond to super simple questions or to make jokes from time to time.
&bull;	Add the ability to transfer files between users.
&bull;	Add a context menu to the GUI-based client, for example, to send a private message to someone from a list of participants.
&bull;	Color the messages in the GUI-based client, depending on the sender.
&bull;	Add the ability for the server to block participants, for example, for offensive language in messages.
&bull;	Add another million features and abilities!

You learned how to:
&bull;	Work with sockets.
&bull;	Use serialization and deserialization.
&bull;	Create and synchronize multi-threaded applications, use the volatile modifier, and use classes from the java.util.concurrent library.
&bull;	Apply the MVC pattern.
&bull;	Use inner and nested classes.
&bull;	Work with the Swing library.
&bull;	Use the Calendar and SimpleDateFormat classes.

Keep it up!


Требования:
1.	Congratulations, the chat system is ready!


Chat (part 22)


I have great news for you. The view component is already done. I&#39;ve added a ClientGuiView class.
It uses the javax.swing library. You should really study every line of this class.
If everything is clear, that&#39;s wonderful. If not, be sure to find answers to your questions using the debugger,
documentation, or an Internet search.

We just need to write the controller component:
1) Create a ClientGuiController class that inherits Client.
2) Create and initialize a ClientGuiModel model field, which is responsible for the model.
3) Create and initialize a ClientGuiView view field, which is responsible for the view.
Think about what you need to pass to the constructor when the object is initialized.
4) Add a GuiSocketThread inner class that inherits SocketThread. The GuiSocketThread class must be public.
It overrides the following methods:
a) void processIncomingMessage(String message) - It should set a new message
on the model and trigger an update on the view of the message.
b) void informAboutAddingNewUser(String userName) - It should add a new user
to the model and trigger an update of the view of the users.
c) void informAboutDeletingNewUser(String userName) - It should remove a user
from the model and trigger an update on the view of the users.
d) void notifyConnectionStatusChanged(boolean clientConnected) - It should call a similar method on the view.
5) Override the following methods in the ClientGuiController class:
a) SocketThread getSocketThread() - It should create and return a GuiSocketThread object.
b) void run() - It should get a SocketThread object via the getSocketThread() method and call its run() method.
Figure out we don&#39;t need to call the run() method on a separate thread, like we did for the console-based client.
c) getServerAddress(), getServerPort(), getUserName(). They should call the identically-named methods on the view.
6) Implement the ClientGuiModel getModel() method, which should return the model.
7) Implement the main() method, which should create a new ClientGuiController object and call its run() method.

Start a GUI-based client and several console-based clients, and make sure that everything works correctly.



Chat (part 22)


We&#39;ve already implemented a console-based client and a chat bot. Why not a client with a GUI?
It will also work with our server, but it will have a graphic window, buttons, etc.
Well, let&#39;s get started. The Model-View-Controller (MVC) pattern is well suited for  a GUI-based client.
You should have become acquainted with this pattern already.
If necessary, use the Internet to refresh your knowledge of MVC.
In our task, the class responsible for the model will have the simplest implementation.

Let&#39;s write it:
1) Create a new ClientGuiModel class in the client package. All client-related classes should be created in this package.
2) Add a set of strings as a final allUserNames field. It will store a list of all the chat participants. Initialize it.
3) Add a String newMessage field, which will store the new message received by the client.
4) Add an allUserNames getter that prevents modification of the returned Set.
Figure out how this can be done using a method of the Collections class.
5) Add a setter and a getter for the newMessage field.
6) Add a void addUser(String newUserName) method that adds the participant&#39;s name to a set containing all the participants.
7) Add a void deleteUser(String userName) method that removes the participant&#39;s name from the set.



Chat (part 22)


Now we&#39;ll implement the BotSocketThread class, or rather we&#39;ll override some
methods. All of its main functionality is inherited from SocketThread.

1) Override the clientMainLoop() method:
a) Use the sendTextMessage() method to send this message:
&quot;Hello, there. I&#39;m a bot. I understand the following commands: date, day, month, year, time, hour, minutes, seconds.&quot;
b) Call the parent class&#39;s clientMainLoop() method.
2) Override the processIncomingMessage(String message) method. It should process incoming messages as follows:
a) Display the text of the received message on the console.
b) Get the sender&#39;s name and the message text from the message. They are separated by &quot;: &quot;.
c) Send a reply based on the text of the received message. If the text of the message is:
&quot;date&quot; - send a message containing the current date in the format &quot;d.MM.YYYY&quot;;
&quot;day&quot; - in the format &quot;d&quot;;
&quot;month&quot; - &quot;MMMM&quot;;
&quot;year&quot; - &quot;YYYY&quot;;
&quot;time&quot; - &quot;H:mm:ss&quot;;
&quot;hour&quot; - &quot;H&quot;;
&quot;minutes&quot; - &quot;m&quot;;
&quot;seconds&quot; - &quot;s&quot;.
Use the format above to create a SimpleDateFormat object.
To get the current date, you must use the Calendar class and getTime() method.
The response must include the name of the client who sent the request and is waiting for a response,
e.g. if Bob sent the &quot;time&quot; request, we should send the following response:
&quot;Information for Bob: 12:30:47&quot;.

Our bot is ready. Start the server, start the bot and a regular client, and be sure that everything works correctly.
Remember that there are different types of messages and they don&#39;t always contain &quot;:&quot;



Chat (part 22)


Sometimes you can&#39;t find someone worth talking to. Don&#39;t start talking to yourself :).
Let&#39;s write a bot that will be a client that automatically respond to certain commands.
The easiest version would be a bot that sends the current time or date when someone asks for it.

Let&#39;s start with that:
1) Create a new BotClient class in the client package. It must inherit Client.
2) In the BotClient class, create a BotSocketThread inner class that inherits SocketThread. The BotSocketThread class must be public.
3) Override the following methods:
a) getSocketThread(). It should create and return a BotSocketThread object.
b) shouldSendTextFromConsole(). It should always return false. We don&#39;t want the bot to send text entered from the console.
c) getUserName(). This method should generate a new bot name, for example, date_bot_X, where X is any number from 0 to 99.
Use the Math.random() method to generate X.
4) Add the main() method. It should create a new BotClient object and call its run() method.



Chat (part 22)


The last, but most important, method of the SocketThread class is the void run() method. Add it.
Given the methods we&#39;ve already created, implementing this method looks very simple.

Let&#39;s do it:
1) Request the server address and server port using the getServerAddress() and getServerPort() methods.
2) Create a new java.net.Socket object using the data obtained in previous step.
3) Create a Connection object using the socket from step 17.2.
4) Call the method that implements the client-server &quot;handshake&quot; (clientHandshake()).
5) Call the method that implements the main loop for processing server messages.
6) If an IOException or ClassNotFoundException is thrown, notify the main thread
using notifyConnectionStatusChanged() and false as the argument.

The client is ready. You can start the server and several clients, and check how everything works.



